/*! For license information please see 2.vlibras-plugin.js.LICENSE.txt */
(window.webpackJsonpVLibras=window.webpackJsonpVLibras||[]).push([[2],{"./widget/src/components/AccessButton/text-capture.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadTextCaptureScript\", function() { return loadTextCaptureScript; });\nconst { $, addClass, removeClass, canTranslate, toggleClass, getWidget } = __webpack_require__(/*! ~utils */ \"./plugin/utils/index.js\");\r\n\r\nfunction loadTextCaptureScript() {\r\n  const $root = Array.from([document.body, ...document.body.children]);\r\n  const $vw = getWidget();\r\n  const $guide = $('.vp-guide-container');\r\n\r\n  const hasTag = (el, tags) => tags.includes(el.tagName);\r\n  const hasTooltip = () => $('.vw-links') ? true : false;\r\n  const isLinkOrButton = el => hasTag(el, [\"A\", \"BUTTON\"]);\r\n  const isSubmitInput = el => hasTag(el, \"INPUT\") && el.type === 'submit';\r\n  const isValidImage = el => hasTag(el, \"IMG\") && el.alt && el.alt.trim();\r\n  const isSelect = el => hasTag(el, \"SELECT\");\r\n  const isSVG = el => hasTag(el, ['SVG', 'PATH']);\r\n\r\n  createTooltip();\r\n\r\n  function hasLinkAncestor(el) {\r\n    while (el) {\r\n      if ($root.includes(el)) break;\r\n      if (isLinkOrButton(el) || (el.onclick && !isSVG(el))) return el;\r\n      el = el.parentNode;\r\n    } return null;\r\n  }\r\n\r\n  function isValidElement(element) {\r\n\r\n    if ($vw.contains(element) || $guide.contains(element)) return false;\r\n\r\n    return element.matches('.vw-links') ? false\r\n      : hasTextContent(element)\r\n      || hasLinkAncestor(element)\r\n      || isSubmitInput(element)\r\n      || isValidImage(element)\r\n      || isSelect(element)\r\n  }\r\n\r\n  function hasTextContent(el) {\r\n    const check = (item) => item.nodeType === Node.TEXT_NODE && item.textContent.trim();\r\n    return Array.from(el.childNodes).some(e => check(e));\r\n  }\r\n\r\n  function highlightElement({ target: element }) {\r\n    if (isValidElement(element)) addClass(element, 'vw-text--hover');\r\n  }\r\n\r\n  function toggleChecked(element) {\r\n    const input = $('input', element.parentElement);\r\n    if (input && (['radio', 'checkbox'].includes(input.type))) input.checked = !input.checked;\r\n  }\r\n\r\n  function translateContent(event) {\r\n    removeTooltips();\r\n    const element = event.target;\r\n    const isSubmit = isSubmitInput(element);\r\n\r\n    if (!isValidElement(element)) return;\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const getTextContent = () => {\r\n      try {\r\n        if (hasTag(element, 'IMG')) return element.alt;\r\n        else if (isSubmit) return element.value;\r\n        else if (hasTag(element, 'SELECT')) return $(element, `[value=\"${element.value}\"]`).innerText;\r\n        else if (element.innerText) return element.innerText.replace(/\\s+/g, ' ');\r\n        else element.textContent;\r\n      } catch { }\r\n    }\r\n\r\n    const textContent = getTextContent();\r\n\r\n    // Call VLibras Widget\r\n    if (textContent && textContent.trim()) window.plugin.translate(textContent);\r\n\r\n    const linkElement = element.tagName === \"A\" ? element : hasLinkAncestor(element);\r\n\r\n    if (linkElement) showTooltip(linkElement, event);\r\n    if (hasTag(element, 'LABEL')) toggleChecked(element);\r\n    else if (hasTag(element, 'BUTTON') || isSubmit) showTooltip(element, event);\r\n  }\r\n\r\n  function clickHandler(element, event = null) {\r\n    if (event) event.stopPropagation();\r\n    document.removeEventListener(\"click\", translateContent, true);\r\n    element.click();\r\n    document.addEventListener(\"click\", translateContent, true);\r\n  }\r\n\r\n  function removeHighlight(event) {\r\n    removeClass(event.target, 'vw-text--hover');\r\n  }\r\n\r\n  function showTooltip(linkElement, event) {\r\n    if (!linkElement) return;\r\n    removeTooltips();\r\n    const tooltip = $('.vw-links');\r\n    tooltip.innerText = linkElement.tagName === 'A' ? \"Acessar link\" : 'Interagir';\r\n\r\n    const { clientX, clientY } = event;\r\n    const yView = clientY > innerHeight - 100;\r\n    const xView = clientX > innerWidth - 120;\r\n    const iWidth = innerWidth - clientX - 20;\r\n\r\n    toggleClass(tooltip, 'vw-yView', yView);\r\n    toggleClass(tooltip, 'vw-xView', xView);\r\n\r\n    tooltip.style.top = clientY + (yView ? -68 : 48) + 'px';\r\n    tooltip.style.right = xView ? (iWidth < 20 ? 20 : iWidth - 20) + 'px' : 'auto';\r\n    tooltip.style.left = !xView ? (clientX < 20 ? 20 : clientX - 20) + 'px' : 'auto';\r\n    tooltip.style.display = 'block';\r\n\r\n    tooltip.onclick = (e) => clickHandler(linkElement, e);\r\n    document.addEventListener(\"click\", removeTooltips);\r\n  }\r\n\r\n  function removeTooltips() {\r\n    const tooltip = $('.vw-links')\r\n    if (tooltip) tooltip.style.display = 'none';\r\n    document.removeEventListener(\"click\", removeTooltips);\r\n  }\r\n\r\n  function createTooltip() {\r\n    if (hasTooltip()) return;\r\n    const tooltip = document.createElement('div');\r\n    addClass(tooltip, 'vw-links');\r\n    document.body.appendChild(tooltip);\r\n  }\r\n\r\n  function activate() {\r\n    if (!canTranslate()) return;\r\n    document.addEventListener(\"mouseover\", highlightElement);\r\n    document.addEventListener(\"mouseout\", removeHighlight);\r\n    document.addEventListener(\"scroll\", removeTooltips);\r\n    document.addEventListener(\"click\", translateContent, true);\r\n\r\n    window.addEventListener('vp-widget-close', deactivate);\r\n    window.addEventListener('vp-disable-text-capture', deactivate);\r\n    window.addEventListener('vp-enable-text-capture', activate);\r\n  }\r\n\r\n  function deactivate() {\r\n    removeTooltips();\r\n    document.removeEventListener(\"mouseover\", highlightElement);\r\n    document.removeEventListener(\"mouseout\", removeHighlight);\r\n    document.removeEventListener(\"scroll\", removeTooltips);\r\n    document.removeEventListener(\"click\", translateContent, true);\r\n\r\n    window.removeEventListener('vp-widget-close', deactivate);\r\n    window.removeEventListener('vp-disable-text-capture', deactivate);\r\n  }\r\n\r\n  activate();\r\n\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://VLibras/./widget/src/components/AccessButton/text-capture.js?")}}]);